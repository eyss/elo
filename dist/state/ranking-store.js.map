{"version":3,"file":"ranking-store.js","sourceRoot":"","sources":["../../src/state/ranking-store.ts"],"names":[],"mappings":";;AACA,OAAO,EACL,GAAG,EAKH,QAAQ,GACT,MAAM,cAAc,CAAC;AAYtB,MAAM,OAAO,eAAe;IAM1B,YACY,UAAsB,EACtB,aAA4B,EAC5B,SAAiB;QAFjB,eAAU,GAAV,UAAU,CAAY;QACtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,cAAS,GAAT,SAAS,CAAQ;QAR7B,iCAAsC,QAAQ,CAAC;YAC7C,OAAO,EAAE,EAAE;YACX,yBAAyB,EAAE,IAAI;SAChC,CAAC,EAAC;IAMA,CAAC;IAEJ,SAAS,CAAC,UAAyC;QACjD,OAAO,uBAAA,IAAI,8BAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,eAAe,GAAG,GAAG,CAAC,uBAAA,IAAI,8BAAO,CAAC,CAAC,OAAO,CAAC;QAEjD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QAEjD,+EAA+E;QAC/E,qDAAqD;QACrD,MAAM,SAAS,GACb,IAAI,CAAC,SAAS;YACd,CAAC,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC;gBAClC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM;gBACjC,CAAC,CAAC,CAAC,CAAC,CAAC;QAET,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACxD,OAAO,EACP,SAAS,CACV,CAAC;QACF,IAAI,yBAAyB,GAAG,KAAK,CAAC;QAEtC,MAAM,cAAc,GAAqB,EAAE,CAAC;QAE5C,KAAK,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;gBAAE,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YAC7D,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC1B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;wBAC1C,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC3B,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACtC;yBAAM;wBACL,yBAAyB,GAAG,IAAI,CAAC;qBAClC;iBACF;aACF;SACF;QAED,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAE7D,uBAAA,IAAI,8BAAO,CAAC,GAAG,CAAC;YACd,OAAO,EAAE,eAAe;YACxB,yBAAyB;SAC1B,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,OAAmB;QACpC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,SAAS,CAAC;QAExC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IAC3B,CAAC;CACF","sourcesContent":["import { ProfilesStore } from '@holochain-open-dev/profiles';\nimport {\n  get,\n  Readable,\n  Subscriber,\n  Unsubscriber,\n  Writable,\n  writable,\n} from 'svelte/store';\nimport flatten from 'lodash-es/flatten';\n\nimport { AgentPubKeyB64 } from '@holochain-open-dev/core-types';\nimport { EloService } from '../elo-service';\nimport { EloRanking } from '../types';\n\nexport interface ChunkedEloRanking {\n  ranking: EloRanking;\n  thereAreMoreChunksToFetch: boolean;\n}\n\nexport class EloRankingStore implements Readable<ChunkedEloRanking> {\n  #store: Writable<ChunkedEloRanking> = writable({\n    ranking: {},\n    thereAreMoreChunksToFetch: true,\n  });\n\n  constructor(\n    protected eloService: EloService,\n    protected profilesStore: ProfilesStore,\n    protected chunkSize: number\n  ) {}\n\n  subscribe(subscriber: Subscriber<ChunkedEloRanking>): Unsubscriber {\n    return this.#store.subscribe(subscriber);\n  }\n\n  async fetchNextChunk() {\n    const existingRanking = get(this.#store).ranking;\n\n    const fromElo = this.newFromElo(existingRanking);\n\n    // This is needed to handle the case in which we already have some agents for a\n    // certain ELO and we want to fetch N more than those\n    const chunkSize =\n      this.chunkSize +\n      (fromElo && existingRanking[fromElo]\n        ? existingRanking[fromElo].length\n        : 0);\n\n    const nextChunk = await this.eloService.getEloRankingChunk(\n      fromElo,\n      chunkSize\n    );\n    let thereAreMoreChunksToFetch = false;\n\n    const pubKeysToFetch: AgentPubKeyB64[] = [];\n\n    for (const [ranking, agents] of Object.entries(nextChunk)) {\n      if (!existingRanking[ranking]) existingRanking[ranking] = [];\n      for (const agent of agents) {\n        if (!existingRanking[ranking].includes(agent)) {\n          if (pubKeysToFetch.length < this.chunkSize) {\n            pubKeysToFetch.push(agent);\n            existingRanking[ranking].push(agent);\n          } else {\n            thereAreMoreChunksToFetch = true;\n          }\n        }\n      }\n    }\n\n    await this.profilesStore.fetchAgentsProfiles(pubKeysToFetch);\n\n    this.#store.set({\n      ranking: existingRanking,\n      thereAreMoreChunksToFetch,\n    });\n  }\n\n  private newFromElo(ranking: EloRanking): number | undefined {\n    const elos = Object.keys(ranking).map(parseInt);\n    if (elos.length === 0) return undefined;\n\n    return Math.min(...elos);\n  }\n}\n"]}