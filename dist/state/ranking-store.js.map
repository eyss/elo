{"version":3,"file":"ranking-store.js","sourceRoot":"","sources":["../../src/state/ranking-store.ts"],"names":[],"mappings":";;AACA,OAAO,EACL,GAAG,EAKH,QAAQ,GACT,MAAM,cAAc,CAAC;AACtB,OAAO,OAAO,MAAM,mBAAmB,CAAC;AAUxC,MAAM,OAAO,eAAe;IAM1B,YACY,UAAsB,EACtB,aAA4B,EAC5B,SAAiB;QAFjB,eAAU,GAAV,UAAU,CAAY;QACtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,cAAS,GAAT,SAAS,CAAQ;QAR7B,iCAAsC,QAAQ,CAAC;YAC7C,OAAO,EAAE,EAAE;YACX,yBAAyB,EAAE,IAAI;SAChC,CAAC,EAAC;IAMA,CAAC;IAEJ,SAAS,CAAC,UAAyC;QACjD,OAAO,uBAAA,IAAI,8BAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAElC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACxD,OAAO,EACP,IAAI,CAAC,SAAS,CACf,CAAC;QAEF,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;QAErD,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAEzD,MAAM,yBAAyB,GAC7B,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;QAEjE,uBAAA,IAAI,8BAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;YACnC,OAAO,EAAE;gBACP,GAAG,OAAO;gBACV,GAAG,SAAS;aACb;YACD,yBAAyB;SAC1B,CAAC,CAAC,CAAC;IACN,CAAC;IAEO,UAAU;QAChB,MAAM,OAAO,GAAG,GAAG,CAAC,uBAAA,IAAI,8BAAO,CAAC,CAAC,OAAO,CAAC;QAEzC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,SAAS,CAAC;QAExC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import { ProfilesStore } from '@holochain-open-dev/profiles';\nimport {\n  get,\n  Readable,\n  Subscriber,\n  Unsubscriber,\n  Writable,\n  writable,\n} from 'svelte/store';\nimport flatten from 'lodash-es/flatten';\n\nimport { EloService } from '../elo-service';\nimport { EloRanking } from '../types';\n\nexport interface ChunkedEloRanking {\n  ranking: EloRanking;\n  thereAreMoreChunksToFetch: boolean;\n}\n\nexport class EloRankingStore implements Readable<ChunkedEloRanking> {\n  #store: Writable<ChunkedEloRanking> = writable({\n    ranking: {},\n    thereAreMoreChunksToFetch: true,\n  });\n\n  constructor(\n    protected eloService: EloService,\n    protected profilesStore: ProfilesStore,\n    protected chunkSize: number\n  ) {}\n\n  subscribe(subscriber: Subscriber<ChunkedEloRanking>): Unsubscriber {\n    return this.#store.subscribe(subscriber);\n  }\n\n  async fetchNextChunk() {\n    const fromElo = this.newFromElo();\n\n    const nextChunk = await this.eloService.getEloRankingChunk(\n      fromElo,\n      this.chunkSize\n    );\n\n    const allPubKeys = flatten(Object.values(nextChunk));\n\n    await this.profilesStore.fetchAgentsProfiles(allPubKeys);\n\n    const thereAreMoreChunksToFetch =\n      allPubKeys.length !== 0 && allPubKeys.length >= this.chunkSize;\n\n    this.#store.update(({ ranking }) => ({\n      ranking: {\n        ...ranking,\n        ...nextChunk,\n      },\n      thereAreMoreChunksToFetch,\n    }));\n  }\n\n  private newFromElo(): number | undefined {\n    const ranking = get(this.#store).ranking;\n\n    const elos = Object.keys(ranking).map(parseInt);\n    if (elos.length === 0) return undefined;\n\n    return Math.min(...elos) - 1;\n  }\n}\n"]}